#Libraries
import RPi.GPIO as GPIO
import time
from time import sleep
 
#GPIO Mode (BOARD / BCM)
GPIO.setmode(GPIO.BCM)
 
#set GPIO Pins
GPIO_TRIGGER = 18
GPIO_ECHO = 24
led_pin = 21

 
#set GPIO direction (IN / OUT)
GPIO.setup(GPIO_TRIGGER, GPIO.OUT)
GPIO.setup(GPIO_ECHO, GPIO.IN)
GPIO.setup(led_pin, GPIO.OUT)

#Creating a PWM object with LED and 100 Hz
pwm = GPIO.PWM(led_pin, 100)
pwm.start(0)
 
def distance():
    # set Trigger to HIGH
    GPIO.output(GPIO_TRIGGER, True)
 
    # set Trigger after 0.01ms to LOW
    time.sleep(0.00001)
    GPIO.output(GPIO_TRIGGER, False)
 
    StartTime = time.time()
    StopTime = time.time()

    #Min and max distance in relation of the frequency   
    Max = 100
    Min = 0
    
    # save StartTime
    while GPIO.input(GPIO_ECHO) == 0:
        StartTime = time.time()
 
    # save time of arrival
    while GPIO.input(GPIO_ECHO) == 1:
        StopTime = time.time()
 
    # time difference between start and arrival
    TimeElapsed = StopTime - StartTime
    # multiply with the sonic speed (34300 cm/s)
    # and divide by 2, because there and back
    distance = ((TimeElapsed * 34300) / 2) 
    
    
    #changing the brightness of the LED depending on the distance 
    if distance < Max and distance > Min:
        pwm.ChangeDutyCycle(100 - distance)
    
    #if the distance above 100cm, change the brightness to lowesr level 
    if distance > Max:
        pwm.ChangeDutyCycle(1)
    elif distance < Min:
        pwm.ChangeDutyCycle(100)

    if distance <= Max:  
        return distance
    else:
        return Max
    
    
if __name__ == '__main__':
    #loop that calls the function and print the distance until the user exit
    try:
        while True:
            dist = distance()
            print ("Measured Distance = %.1f cm" % dist)
            time.sleep(0.5)
 
    # Exit by pressing CTRL + C
    except KeyboardInterrupt:
        print("Measurement stopped by User")
        GPIO.cleanup()
